<list>
  <p if={ error } class="error">{ this.props.state.error }</p>

  <div class="dropdown">
      <button if={ !this.genreChosen } class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
          Dropdown button
      </button>
      <button if={ this.genreChosen } class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
          { this.genreChosen[0].name }
      </button>
      <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
          <div class="dropdown-item" each={genre in this.genres}>
              <a id={ genre.id } onclick={ filterGenre }>{ genre.name }</a>
          </div>
      </div>
  </div>

  <div class="container">
    <div class="row" if={ state.results[0] }>
      <div class="col-4" each={ result in state.results }>
      <div class="card mb-3">
          <div class="card-body">
            <h5 class="card-title">{ result.title }</h5>
            <h6 class="card-subtitle text-muted collapseExample">{ result.vote_average } / 10 - { result.vote_count } (nb de votes)</h6>
          </div>
          <img  if={ result.poster_path } src="https://image.tmdb.org/t/p/w200{ result.poster_path }" alt="{result.title}">
          <img  if={ !result.poster_path } src="https://www.themoviedb.org/assets/2/v4/glyphicons/basic/glyphicons-basic-38-picture-grey-c2ebdbb057f2a7614185931650f8cee23fa137b93812ccb132b9df511df1cfac.svg">
          <div class="card-body ">
            <a href="#" class="btn btn-primary">Go somewhere</a>
<!--            <p each={genre in result.genreName}>{ genre.name }</p>-->

          </div>
        </div>
    </div>
  </div>
</div>
<script>
  export default {
    onBeforeMount(){
      this.loadMovie()
    },
    loadMovie (){
      this.genres=null;
      this.genreId=null;
      fetch(`https://api.themoviedb.org/3/genre/movie/list?api_key=87c2c0742f05a556efd337824f959447&language=fr-FR`)
              .then((res) => res.json())
              .then((data) => {
                this.genres = data.genres;
                // console.log(data.genres);
              })
      this.state.results=this.props.results;
    },
      onUpdated(){
          this.state.results=this.props.results;
          if(this.genres !== null){
              this.state.results.forEach((element) => {
                  let genreName=[];
                  for(i of element.genre_ids){
                      // console.log(i);
                      genreName.push(this.genres.find((e) => e.id === i))
                      element.genreName = genreName;
                  }
                  console.log(genreName);
              })
          }
          if(this.genreId !== null){
              console.log('plop',this.genreId);
              this.state.results = this.props.results.filter(word => {
                  let returnCode=0;
                  for(var i = 0, len = word.genre_ids.length; i < len; i++) {
                      if(word.genre_ids[i] === parseInt(this.genreId)){
                          console.log("FOUND");
                          returnCode=1;
                          break;
                      }
                      else{
                          console.log("NOT FOUND")
                      }
                  }
                  return returnCode;
              })
          }
      },
      filterGenre(e){
          console.log(e.target.id);
          console.log(this.genres)
          this.genreChosen = this.genres.filter(a => parseInt(e.target.id) === a.id);
          console.log(this.genreChosen)
          this.genreId=e.target.id;
          this.update();
      }
    }
</script>
</list>

