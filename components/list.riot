<list>
    <div class="row">
        <div class="dropdown">
            <button if={ !this.validGenre } class="btn btn-secondary dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                Selectionner un genre
            </button>
            <button if={ this.validGenre } class="btn btn-secondary dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                { this.validGenre[0].name }
            </button>
            <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                <div class="dropdown-item" each={genre in this.genres}>
                    <a id={ genre.id } onclick={ searchGenre }>{ genre.name }</a>
                </div>
            </div>
        </div>
    </div>

    <div class="row" if={ state.results }>
        <div class="col-4" each={ result in state.results }>
        <div class="card mb-3">
            <div class="card-body">
                <h5 class="card-title">{ result.title }</h5>
                <h6 class="card-subtitle text-muted collapseExample">{ result.vote_average } / 10 - { result.vote_count } (nb de votes)</h6>
            </div>
                <img  if={ result.poster_path } src="https://image.tmdb.org/t/p/w200{ result.poster_path }" alt="{result.title}">
                <img  if={ !result.poster_path } src="https://www.themoviedb.org/assets/2/v4/glyphicons/basic/glyphicons-basic-38-picture-grey-c2ebdbb057f2a7614185931650f8cee23fa137b93812ccb132b9df511df1cfac.svg">
            <div class="card-body ">
<!--                <a href="/test" class="btn btn-primary"><test></test></a>-->
                <span each={genre in result.genreName} class="badge rounded-pill bg-primary">{ genre.name }</span>
            </div>
        </div>
    </div>

    <div class="row" if={ !state.results }>
        Pas de resultats !
    </div>

<script>
  export default {
    onBeforeMount(){
      this.loadGenre()
    },
      loadGenre (){
      this.genres=null;
      this.genreId=null;
      fetch(`https://api.themoviedb.org/3/genre/movie/list?api_key=87c2c0742f05a556efd337824f959447&language=fr-FR`)
              .then((res) => res.json())
              .then((data) => {
                this.genres = data.genres;
              })
      this.state.results=this.props.results;
    },
      onUpdated(){
          this.state.results=this.props.results;
          if(this.genres !== null){
              this.state.results.forEach((element) => {
                  let genreName=[];
                  for(i of element.genre_ids){
                      genreName.push(this.genres.find((e) => e.id === i))
                      element.genreName = genreName;
                  }
              })
          }
          if(this.genreId !== null){
              this.state.results = this.props.results.filter(word => {
                  let returnCode=0;
                  for(var i = 0, len = word.genre_ids.length; i < len; i++) {
                      if(word.genre_ids[i] === parseInt(this.genreId)){
                          returnCode=1;
                          break;
                      }
                      else{
                      }
                  }
                  return returnCode;
              })
          }
      },
      searchGenre(e){
          this.validGenre = this.genres.filter(a => parseInt(e.target.id) === a.id);
          this.genreId=e.target.id;
          this.update();
      }
    }
</script>
</list>

